import React, { useEffect } from "react";
import Head from "next/head";
import Box from "@mui/material/Box";
import Grid from "@mui/material/Grid";
import FormData from "form-data";
import NavBar from "../components/User/NavBar/NavBar";
import SideBar from "../components/User/Home/SideBar";
import Feed from "../components/User/Home/Feed";
import RightBar from "../components/User/Home/RightBar";
import { createTheme, ThemeProvider } from "@mui/material";
import { useState } from "react";
import { getSession, useSession } from "next-auth/react";
import dynamic from "next/dynamic";
import instance from "../axios/axios";
const BottomBar = dynamic(
  () => import("../components/User/MobileBottom/MobileBottom")
);
// import axios from "axios";

// const inter = Inter({ subsets: ['latin'] })

/**
 * Home Page of the Application
 * @return {JSX.Element}
 */

export default function Home({ req }: { req: any }) {
  useEffect(() => {
    (async () => {
      const session = await getSession({ req });
      console.log("github", session);
      if (session) {
        const chars =
          "0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        const passwordLength = 12;
        let password = "";

        for (let i = 0; i < passwordLength; i++) {
          const randomNumber = Math.floor(Math.random() * chars.length);
          password += chars.substring(randomNumber, randomNumber + 1);
        }

        const data = new FormData();
        data.append("firstName", session.user.name);
        data.append("lastName", "");
        data.append("email", session.user.email);
        data.append("image", session.user.image);
        data.append("password", password);
        data.append("confirmPassword", password);
        data.append("signInWith", "google");
        try {
          const res = await instance.post("/user/registerWithProviders", data, {
            withCredentials: true,
            headers: {
              "Content-Type": "application/json",
            },
          });
          console.log(res);
        } catch (error) {
          console.log(error);
        }
      }
    })();
  }, []);

  const [mode, setMode] = useState<string>("dark");

  // const {data:session} =
  useSession();

  const theme = createTheme({
    palette: {
      mode: mode == "light" ? "light" : "dark",
    },
  });

  return (
    <>
      <ThemeProvider theme={theme}>
        <Head>
          <title>Portal</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
          {/* <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" /> */}
        </Head>
        <Box bgcolor={"background.default"} color={"text.primary"}>
          <NavBar mode={mode} setMode={setMode} />
          <Grid container item sx={{ paddingLeft: { xs: 0, sm: 1, lg: 1 } }}>
            <Grid item sm={3} p={2} justifyContent="space-between">
              <SideBar />
            </Grid>
            <Grid item sm={6} pt={2}>
              <Feed mode={mode} />
            </Grid>
            <Grid item sm={3} p={2}>
              <RightBar />
            </Grid>
          </Grid>
          <BottomBar />
        </Box>
      </ThemeProvider>
    </>
  );
}

export async function getServerSideProps({ req }: { req: any }) {
  let session: any = await getSession({ req });
  let cookies = req.cookies.jwt;

  if (session == null && !cookies) {
    return {
      redirect: {
        destination: "/User/Login",
        permanent: false,
      },
    };
  }

  if (session?.user || cookies) {
    if (!session) session = null;
    if (!cookies) cookies = null;
    return {
      props: {
        session,
        cookies,
      },
    };
  } else {
    return {
      redirect: {
        destination: "/User/Login",
        permanent: false,
      },
    };
  }
}
